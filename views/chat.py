import streamlit as st
import google.generativeai as genai

def chatbot_response(chat, message, history):
    # Define specific responses based on user input
    if "c√°ch t·∫£i ·∫£nh l√™n" in message.lower():
        chatbot_reply = (
            "Vui l√≤ng click v√†o ph·∫ßn Upload and Predict ƒë·ªÉ t·∫£i ·∫£nh b·∫°n mu·ªën d·ª± ƒëo√°n c√≥ u n√£o hay kh√¥ng, "
            "sau khi t·∫£i ·∫£nh l√™n, xin vui l√≤ng ch·ªù k·∫øt qu·∫£ trong gi√¢y l√°t."
        )
        history.append((message, chatbot_reply))
        return history

    if "l∆∞u √Ω khi s·ª≠ d·ª•ng ·ª©ng d·ª•ng" in message.lower():
        chatbot_reply = (
            "M·ªçi k·∫øt qu·∫£ c·ªßa chatbot ch·ªâ l√† d·ª± ƒëo√°n, vui l√≤ng g·∫∑p b√°c sƒ© chuy√™n khoa ƒë·ªÉ c√≥ th·ªÉ c√≥ k·∫øt qu·∫£ r√µ r√†ng h∆°n v·ªÅ ch·∫©n ƒëo√°n c·ªßa m√¨nh."
        )
        history.append((message, chatbot_reply))
        return history

    # Default response using the chatbot model
    history.append((message, ""))

    system_message = (
        "B·∫°n l√† m·ªôt chatbot chuy√™n nghi·ªáp trong lƒ©nh v·ª±c y t·∫ø, ƒë·∫∑c bi·ªát v·ªÅ ch·ªß ƒë·ªÅ u n√£o. "
        "Ngo√†i vi·ªác tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn c√°c lo·∫°i u n√£o, tri·ªáu ch·ª©ng, ch·∫©n ƒëo√°n, ƒëi·ªÅu tr·ªã, v√† ph∆∞∆°ng ph√°p ph·ª•c h·ªìi, "
        "b·∫°n c≈©ng c√≥ th·ªÉ gi·∫£i th√≠ch k·∫øt qu·∫£ ph√¢n lo·∫°i, cung c·∫•p h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ·ª©ng d·ª•ng, v√† c√°c l∆∞u √Ω quan tr·ªçng khi s·ª≠ d·ª•ng. "
        "N·∫øu ng∆∞·ªùi d√πng c·∫ßn, h√£y h∆∞·ªõng d·∫´n c√°ch t·∫£i ·∫£nh l√™n, ƒë·ªçc hi·ªÉu k·∫øt qu·∫£ d·ª± ƒëo√°n, v√† ƒë∆∞a ra c√°c g·ª£i √Ω t∆∞∆°ng t√°c kh√°c. "
        "H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng, v√† c√≥ th·ªÉ cung c·∫•p th√¥ng tin chi ti·∫øt n·∫øu c·∫ßn thi·∫øt. "
        "N·∫øu c√¢u h·ªèi ch∆∞a r√µ, y√™u c·∫ßu ng∆∞·ªùi d√πng cung c·∫•p th√™m th√¥ng tin c·ª• th·ªÉ h∆°n."
    )

    context = ""
    for user_message, bot_reply in history:
        context += f"{user_message}\n {bot_reply}\n"

    response = chat.send_message(system_message + "\n\n" + context + "Ng∆∞·ªùi d√πng: " + message, stream=True)
    chatbot_reply = ""
    for chunk in response:
        if chunk.text:
            chatbot_reply += chunk.text + " "

    history[-1] = (message, chatbot_reply.strip())
    return history  

def show():
    genai.configure(api_key='AIzaSyBqHLvnvATwKlnQEhmJQxM_BSAQolc0hg4')  # Replace with your actual API key
    model = genai.GenerativeModel('gemini-1.5-flash')
    chat = model.start_chat(history=[])

    st.title("Chatbot H·ªó tr·ª£ Y t·∫ø - U N√£o")
    st.write("Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?")

    if 'history' not in st.session_state:
        st.session_state.history = []

    chat_area = st.container()
    with chat_area:
        if st.session_state.history:
            for user_message, bot_reply in st.session_state.history:
                st.chat_message("user").markdown(user_message)
                st.chat_message("assistant").markdown(bot_reply)

    user_input = st.text_input("C√¢u h·ªèi c·ªßa b·∫°n...", "")

    # Interaction tips
    st.write("üí° M·∫πo: B·∫°n c√≥ th·ªÉ h·ªèi c√°ch t·∫£i ·∫£nh l√™n, c√°ch ƒë·ªçc hi·ªÉu k·∫øt qu·∫£ ph√¢n lo·∫°i, "
             "ho·∫∑c l∆∞u √Ω khi s·ª≠ d·ª•ng ·ª©ng d·ª•ng.")

    if st.button("G·ª≠i"):
        if user_input:
            st.session_state.history = chatbot_response(chat, user_input, st.session_state.history)

            # Clear input field
            st.text_input("C√¢u h·ªèi c·ªßa b·∫°n...", "", key="new_input")
            st.rerun()

            with chat_area:
                for user_message, bot_reply in st.session_state.history:
                    st.chat_message("user").markdown(user_message)
                    st.chat_message("assistant").markdown(bot_reply)
